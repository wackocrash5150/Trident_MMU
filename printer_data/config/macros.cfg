#####################################################################
#  ███╗   ███╗ █████╗  ██████╗██████╗  ██████╗ ███████╗
#  ████╗ ████║██╔══██╗██╔════╝██╔══██╗██╔═══██╗██╔════╝
#  ██╔████╔██║███████║██║     ██████╔╝██║   ██║███████╗
#  ██║╚██╔╝██║██╔══██║██║     ██╔══██╗██║   ██║╚════██║
#  ██║ ╚═╝ ██║██║  ██║╚██████╗██║  ██║╚██████╔╝███████║
#  ╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝ ╚═════╝ ╚══════╝
#####################################################################

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - PLEASE CUSTOMISE THE SCRIPT
gcode:
    M117 Turning filter on...                 ; display message
    SET_FAN_SPEED FAN=Nevermore SPEED=0.35            ; turn Nevermore fan on
    #G28 ; home all axis - SHOULD ALREADY BE DONE BY MMU STARTUP
    M117 CLEANING Nozzle...                 ; display message
    CLEAN_NOZZLE    
    M117 Adaptive Mesh...                 ; display message
    status_meshing
    BED_MESH_CLEAR ; Clear Bed Mesh
    BED_MESH_CALIBRATE ; Adaptive Meshing
    M117 Logo Purge...                 ; display message
    VORON_PURGE ; Adaptive Purge
    M117 Printing Cool Stuff...                 ; display message
    status_printing

   

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR

    # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # command pair is to restore the printer's coordinate system
    # and speed settings since the commands above change them.
    # However, to prevent any accidental, unintentional toolhead
    # moves when restoring the state, explicitly set MOVE=0.
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0
    #SET_FILAMENT_SENSOR SENSOR=Filament_Runout ENABLE=0
    SET_FAN_SPEED FAN=Nevermore SPEED=1.0            ; turn Nevermore fan on
    UPDATE_DELAYED_GCODE ID=filter_off DURATION=300
    status_part_ready
    M117 DING! Fries are done!                 ; display message


[pause_resume]

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT



    
##################################################################
# 	PROBE TEST
##################################################################

[gcode_macro PROBE_TEST] ; ##################################### 
gcode: ;
    M117 Testing Probe Accuracy...                 ; display message
    PROBE_ACCURACY ; start 



  ##################################################################
# 	LIGHTS
##################################################################

[gcode_macro LIGHTS_OFF]
gcode:
  SET_LED LED="chamber_lights" RED=0 GREEN=0 BLUE=0 SYNC=0 TRANSMIT=1
  SET_LED LED="sb_leds" RED=0 GREEN=0 BLUE=0 WHITE=0 SYNC=0 TRANSMIT=1

##  Set RGB values on boot up for each Neopixel. 
##  Index 1 = display, Index 2 and 3 = Knob

[delayed_gcode setdisplayneopixel]
initial_duration: 5
gcode:
        SET_LED LED="chamber_lights" RED=1 GREEN=1 BLUE=1 SYNC=0 TRANSMIT=1
        SET_LED LED="sb_leds" RED=1 GREEN=1 BLUE=1 WHITE=1 SYNC=0 TRANSMIT=1

[gcode_macro LIGHTS_ON]
gcode:
        SET_LED LED="chamber_lights" RED=1 GREEN=1 BLUE=1 SYNC=0 TRANSMIT=1
        SET_LED LED="sb_leds" RED=1 GREEN=1 BLUE=1 WHITE=1 SYNC=0 TRANSMIT=1


##################################################################
# 	CARTOGRAPHER Z-TILT
##################################################################

[gcode_macro Cartographer_Z_TILT] # safer and faster QGL for Cartographer
gcode:
    G28 # or use a conditional or safe homing
    SET_VELOCITY_LIMIT ACCEL=5000
    Z_TILT_ADJUST horizontal_move_z=10 retries=0 retry_tolerance=1.000
    Z_TILT_ADJUST horizontal_move_z=3
    G28 Z


##################################################################
# 	SPOOLMAN
##################################################################

[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}


#####################################################################
#   BLOBIFIER WITH NOZZLE CLEAN
#####################################################################

[gcode_macro BLOBIFIER_TRIDENT_NOZZLE]
#   Script for combining BLOBIFIER_TRIDENT and nozzle_scrub into one macro for variable_user_post_load_extension in mmu_macros_vars.cfg
gcode:
    SET_VELOCITY_LIMIT ACCEL=12000
    BLOBIFIER_TRIDENT
    clean_nozzle
    M83 G1 E-5 F1600
    SET_VELOCITY_LIMIT ACCEL=5000

#####################################################################
#   MMU RESET TTG MAP
#####################################################################

[gcode_macro MMU_RESET_TTG]
#   Reset TTG order on the MMU to defaults (T0 to G0, T1 to G1, etc.)
gcode:
    MMU_TTG_MAP RESET=1

    